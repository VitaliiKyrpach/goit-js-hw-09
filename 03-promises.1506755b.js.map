{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,uBAAwCM,OAAfT,EAAS,QAAYS,OAANR,EAAM,OAEpDG,EAAK,sBAAqCK,OAAfT,EAAS,QAAYS,OAANR,EAAM,M,GAEnDA,E,IAsBMS,SAASC,cAAc,QAC/BC,iBAAiB,UAnBtB,SAAkBC,GAChBA,EAAIC,iBAMJ,IALA,IAEqBC,EAAjBF,EAAIG,cADNC,SAAYC,EAAMH,EAANG,OAAQjB,EAAKc,EAALd,MAAOkB,EAAIJ,EAAJI,KAEzBC,EAAWC,OAAOpB,EAAMqB,OAEnBC,EAAI,EAAGA,EAAIL,EAAOI,MAAOC,IAChCxB,EAAcwB,EAAI,EAAGH,EAAWC,OAAOF,EAAKG,OAASC,GAClDC,MAAK,SAAAF,GACJzB,EAAA4B,OAAOC,QAAQJ,E,IAEhBK,OAAM,SAAAC,GACL/B,EAAA4B,OAAOI,QAAQD,E","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      } else {\n        reject(`❌ Rejected promise ${position} in ${delay}ms`);\n      }\n    }, delay);\n  });\n}\n\nfunction onSubmit(evt) {\n  evt.preventDefault();\n  const {\n    elements: { amount, delay, step },\n  } = evt.currentTarget;\n  let countDel = Number(delay.value);\n\n  for (let i = 0; i < amount.value; i++) {\n    createPromise(i + 1, countDel + Number(step.value) * i)\n      .then(value => {\n        Notify.success(value);\n      })\n      .catch(error => {\n        Notify.failure(error);\n      });\n  }\n}\n\nconst form = document.querySelector('form');\nform.addEventListener('submit', onSubmit);\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","concat","document","querySelector","addEventListener","evt","preventDefault","_elements","currentTarget","elements","amount","step","countDel","Number","value","i","then","Notify","success","catch","error","failure"],"version":3,"file":"03-promises.1506755b.js.map"}